diff --git a/crypto/cipher_extra/cipher_extra.c b/crypto/cipher_extra/cipher_extra.c
index e770489e947ecbf3154bb680cf043c9b8dc6159d..04c2c57d412eda4cfa82db8323c188d364761528 100644
--- a/crypto/cipher_extra/cipher_extra.c
+++ b/crypto/cipher_extra/cipher_extra.c
@@ -83,6 +83,8 @@ const EVP_CIPHER *EVP_get_cipherbynid(int nid) {
       return EVP_aes_192_cbc();
     case NID_aes_256_cbc:
       return EVP_aes_256_cbc();
+    case  NID_aes_256_gcm:
+      return EVP_aes_256_gcm();
     default:
       return NULL;
   }
diff --git a/crypto/digest_extra/digest_extra.c b/crypto/digest_extra/digest_extra.c
index 4b4bb38135e6089eaf6f47afda0199567a2397ef..d17d1dc5e6e01fc190267ffc5cf4fca4f42de3cd 100644
--- a/crypto/digest_extra/digest_extra.c
+++ b/crypto/digest_extra/digest_extra.c
@@ -81,6 +81,9 @@ static const struct nid_to_digest nid_to_digest_mapping[] = {
     {NID_sha384, EVP_sha384, SN_sha384, LN_sha384},
     {NID_sha512, EVP_sha512, SN_sha512, LN_sha512},
     {NID_md5_sha1, EVP_md5_sha1, SN_md5_sha1, LN_md5_sha1},
+    {NID_ripemd160, EVP_ripemd160, SN_ripemd160, LN_ripemd160},
+    {NID_ripemd160, EVP_ripemd160, SN_ripemd, LN_ripemd},
+    {NID_ripemd160, EVP_ripemd160, SN_rmd160, LN_rmd160},
     // As a remnant of signing |EVP_MD|s, OpenSSL returned the corresponding
     // hash function when given a signature OID. To avoid unintended lax parsing
     // of hash OIDs, this is no longer supported for lookup by OID or NID.
@@ -99,6 +102,7 @@ static const struct nid_to_digest nid_to_digest_mapping[] = {
      LN_sha384WithRSAEncryption},
     {NID_undef, EVP_sha512, SN_sha512WithRSAEncryption,
      LN_sha512WithRSAEncryption},
+    {NID_undef, EVP_ripemd160, SN_ripemd160WithRSA, LN_ripemd160WithRSA},
 };
 
 const EVP_MD* EVP_get_digestbynid(int nid) {
diff --git a/decrepit/evp/evp_do_all.c b/decrepit/evp/evp_do_all.c
index 38b8f9f78f76050174096740596ac59a0fe18757..34bd1c7ead08562b526bf990fd17913876e8d4c1 100644
--- a/decrepit/evp/evp_do_all.c
+++ b/decrepit/evp/evp_do_all.c
@@ -26,6 +26,7 @@ void EVP_CIPHER_do_all_sorted(void (*callback)(const EVP_CIPHER *cipher,
   callback(EVP_aes_256_cbc(), "AES-256-CBC", NULL, arg);
   callback(EVP_aes_256_ctr(), "AES-256-CTR", NULL, arg);
   callback(EVP_aes_256_ecb(), "AES-256-ECB", NULL, arg);
+  callback(EVP_aes_256_gcm(), "AES-256-GCM", NULL, arg);
   callback(EVP_aes_256_ofb(), "AES-256-OFB", NULL, arg);
   callback(EVP_aes_256_xts(), "AES-256-XTS", NULL, arg);
   callback(EVP_des_cbc(), "DES-CBC", NULL, arg);
@@ -44,6 +45,7 @@ void EVP_CIPHER_do_all_sorted(void (*callback)(const EVP_CIPHER *cipher,
   callback(EVP_aes_256_cbc(), "aes-256-cbc", NULL, arg);
   callback(EVP_aes_256_ctr(), "aes-256-ctr", NULL, arg);
   callback(EVP_aes_256_ecb(), "aes-256-ecb", NULL, arg);
+  callback(EVP_aes_256_gcm(), "aes-256-gcm", NULL, arg);
   callback(EVP_aes_256_ofb(), "aes-256-ofb", NULL, arg);
   callback(EVP_aes_256_xts(), "aes-256-xts", NULL, arg);
   callback(EVP_des_cbc(), "des-cbc", NULL, arg);
@@ -61,6 +63,7 @@ void EVP_MD_do_all_sorted(void (*callback)(const EVP_MD *cipher,
                           void *arg) {
   callback(EVP_md4(), "MD4", NULL, arg);
   callback(EVP_md5(), "MD5", NULL, arg);
+  callback(EVP_ripemd160(), "RIPEMD160", NULL, arg);
   callback(EVP_sha1(), "SHA1", NULL, arg);
   callback(EVP_sha224(), "SHA224", NULL, arg);
   callback(EVP_sha256(), "SHA256", NULL, arg);
@@ -69,6 +72,7 @@ void EVP_MD_do_all_sorted(void (*callback)(const EVP_MD *cipher,
 
   callback(EVP_md4(), "md4", NULL, arg);
   callback(EVP_md5(), "md5", NULL, arg);
+  callback(EVP_ripemd160(), "ripemd160", NULL, arg);
   callback(EVP_sha1(), "sha1", NULL, arg);
   callback(EVP_sha224(), "sha224", NULL, arg);
   callback(EVP_sha256(), "sha256", NULL, arg);
diff --git a/decrepit/ripemd/ripemd.c b/decrepit/ripemd/ripemd.c
index 275d439768b7d75219fce86392ac28c3fa3747fd..60bbeb998809212a43a65ea0bbe2a537418de905 100644
--- a/decrepit/ripemd/ripemd.c
+++ b/decrepit/ripemd/ripemd.c
@@ -56,9 +56,13 @@
 
 #include <openssl/ripemd.h>
 
+#include <openssl/digest.h>
+#include <openssl/nid.h>
 #include <string.h>
 
 #include "internal.h"
+#include "../../crypto/fipsmodule/delocate.h"
+#include "../../crypto/fipsmodule/digest/internal.h"
 
 
 int RIPEMD160_Init(RIPEMD160_CTX *ctx) {
@@ -71,6 +75,38 @@ int RIPEMD160_Init(RIPEMD160_CTX *ctx) {
   return 1;
 }
 
+#if defined(NDEBUG)
+#define CHECK(x) (void) (x)
+#else
+#define CHECK(x) assert(x)
+#endif
+
+static void ripemd160_init(EVP_MD_CTX *ctx)
+{
+    CHECK(RIPEMD160_Init(ctx->md_data));
+}
+
+static void ripemd160_update(EVP_MD_CTX *ctx, const void *data, size_t count)
+{
+    CHECK(RIPEMD160_Update(ctx->md_data, data, count));
+}
+
+static void ripemd160_final(EVP_MD_CTX *ctx, uint8_t *out)
+{
+    CHECK(RIPEMD160_Final(out, ctx->md_data));
+}
+
+DEFINE_METHOD_FUNCTION(EVP_MD, EVP_ripemd160) {
+  out->type = NID_ripemd160;
+  out->md_size = RIPEMD160_DIGEST_LENGTH;
+  out->flags = 0;
+  out->init = ripemd160_init;
+  out->update = ripemd160_update;
+  out->final = ripemd160_final;
+  out->block_size = RIPEMD160_CBLOCK;
+  out->ctx_size = sizeof(RIPEMD160_CTX);
+}
+
 static void ripemd160_block_data_order(uint32_t h[5], const uint8_t *data,
                                        size_t num) {
   uint32_t A, B, C, D, E;
@@ -311,7 +347,7 @@ static void ripemd160_block_data_order(uint32_t h[5], const uint8_t *data,
 #undef X
 }
 
-uint8_t *RIPEMD160(const uint8_t *data, size_t len, unsigned char *out) {
+uint8_t *RIPEMD160(const uint8_t *data, size_t len, uint8_t *out) {
   RIPEMD160_CTX ctx;
 
   if (!RIPEMD160_Init(&ctx)) {
diff --git a/include/openssl/digest.h b/include/openssl/digest.h
index 81f58925e22502b0279b497a53b6a0c6bd47d13c..86c92441aaf32e9fe99508240ff86c5d505b1f07 100644
--- a/include/openssl/digest.h
+++ b/include/openssl/digest.h
@@ -83,6 +83,7 @@ OPENSSL_EXPORT const EVP_MD *EVP_sha224(void);
 OPENSSL_EXPORT const EVP_MD *EVP_sha256(void);
 OPENSSL_EXPORT const EVP_MD *EVP_sha384(void);
 OPENSSL_EXPORT const EVP_MD *EVP_sha512(void);
+OPENSSL_EXPORT const EVP_MD *EVP_ripemd160(void);
 
 // EVP_md5_sha1 is a TLS-specific |EVP_MD| which computes the concatenation of
 // MD5 and SHA-1, as used in TLS 1.1 and below.
diff --git a/include/openssl/nid.h b/include/openssl/nid.h
index afeb2dea4e0464082fa72fd1404f9321eb656dec..2c3c842cb4a21e937993132f7a7cfbae2c18c5db 100644
--- a/include/openssl/nid.h
+++ b/include/openssl/nid.h
@@ -617,6 +617,12 @@ extern "C" {
 #define NID_ripemd160 117
 #define OBJ_ripemd160 1L, 3L, 36L, 3L, 2L, 1L
 
+#define SN_ripemd "RIPEMD"
+#define LN_ripemd "ripemd"
+
+#define SN_rmd160 "RMD160"
+#define LN_rmd160 "rmd160"
+
 #define SN_ripemd160WithRSA "RSA-RIPEMD160"
 #define LN_ripemd160WithRSA "ripemd160WithRSA"
 #define NID_ripemd160WithRSA 119
diff --git a/include/openssl/ssl.h b/include/openssl/ssl.h
index 9544bbebe846abb1efe9bea4aaabd4d301b38bea..e3d9133f6dfb5ad3236284f7edfcefafde1a7ee8 100644
--- a/include/openssl/ssl.h
+++ b/include/openssl/ssl.h
@@ -4266,6 +4266,15 @@ OPENSSL_EXPORT int SSL_CTX_set_tlsext_status_cb(SSL_CTX *ctx,
 // |SSL_CTX_set_tlsext_status_cb|'s callback and returns one.
 OPENSSL_EXPORT int SSL_CTX_set_tlsext_status_arg(SSL_CTX *ctx, void *arg);
 
+#if !defined(BORINGSSL_NO_CXX)
+// SSL_CTX_sess_set_get_cb is a legacy C++ overload of |SSL_CTX_sess_set_get_cb|
+// which supports the old callback signature.
+//
+// TODO(davidben): Remove this once Node is compatible with OpenSSL 1.1.0.
+extern "C++" OPENSSL_EXPORT void SSL_CTX_sess_set_get_cb(
+    SSL_CTX *ctx, SSL_SESSION *(*get_session_cb)(SSL *ssl, uint8_t *id,
+                                                 int id_len, int *out_copy));
+#endif
 
 // Private structures.
 //
diff --git a/ssl/internal.h b/ssl/internal.h
index 28ea87b7261ce8d679b84520678d39f7b47c29b4..a84926a7f62e2e22cc76f18c83ddccaa9840c5eb 100644
--- a/ssl/internal.h
+++ b/ssl/internal.h
@@ -2049,6 +2049,8 @@ struct SSLContext {
   void (*remove_session_cb)(SSL_CTX *ctx, SSL_SESSION *sess);
   SSL_SESSION *(*get_session_cb)(SSL *ssl, const uint8_t *data, int len,
                                  int *copy);
+  SSL_SESSION *(*get_session_cb_legacy)(SSL *ssl, uint8_t *data, int len,
+                                        int *copy);
 
   CRYPTO_refcount_t references;
 
diff --git a/ssl/ssl_session.cc b/ssl/ssl_session.cc
index e31df68869c313770fb56a5e15fafd4b5839117d..332107d2b878d3df04350699383a7493baba3f36 100644
--- a/ssl/ssl_session.cc
+++ b/ssl/ssl_session.cc
@@ -686,10 +686,17 @@ static enum ssl_hs_wait_t ssl_lookup_session(
   }
 
   // Fall back to the external cache, if it exists.
-  if (!session && ssl->session_ctx->get_session_cb != nullptr) {
+  if (!session && (ssl->session_ctx->get_session_cb != nullptr ||
+                   ssl->session_ctx->get_session_cb_legacy != nullptr)) {
     int copy = 1;
-    session.reset(ssl->session_ctx->get_session_cb(ssl, session_id,
-                                                   session_id_len, &copy));
+    if (ssl->session_ctx->get_session_cb != nullptr) {
+      session.reset(ssl->session_ctx->get_session_cb(ssl, session_id,
+                                                     session_id_len, &copy));
+    } else {
+      session.reset(ssl->session_ctx->get_session_cb_legacy(
+          ssl, const_cast<uint8_t *>(session_id), session_id_len, &copy));
+    }
+
     if (!session) {
       return ssl_hs_ok;
     }
@@ -1244,6 +1251,12 @@ void SSL_CTX_sess_set_get_cb(SSL_CTX *ctx,
   ctx->get_session_cb = cb;
 }
 
+void SSL_CTX_sess_set_get_cb(SSL_CTX *ctx,
+                             SSL_SESSION *(*cb)(SSL *ssl, uint8_t *id,
+                                                int id_len, int *out_copy)) {
+  ctx->get_session_cb_legacy = cb;
+}
+
 SSL_SESSION *(*SSL_CTX_sess_get_get_cb(SSL_CTX *ctx))(SSL *ssl,
                                                       const uint8_t *id,
                                                       int id_len,
diff --git a/util/BUILD.toplevel b/util/BUILD.toplevel
index 6e569ec82db970ba8f1004f811ff08cc59794005..905a293ad046e5653352ec59a278df3aa1cf2355 100644
--- a/util/BUILD.toplevel
+++ b/util/BUILD.toplevel
@@ -29,6 +29,7 @@ load(
     "ssl_sources",
     "tool_sources",
     "tool_headers",
+    "decrepit_sources",
 )
 
 config_setting(
@@ -145,6 +146,15 @@ cc_library(
     ],
 )
 
+cc_library(
+    name = "decrepit",
+    srcs = decrepit_sources,
+    copts = boringssl_copts_c11,
+    includes = ["src/include"],
+    visibility = ["//visibility:public"],
+    deps = [":crypto"],
+)
+
 cc_binary(
     name = "bssl",
     srcs = tool_sources + tool_headers,
diff --git a/util/generate_build_files.py b/util/generate_build_files.py
index 11b9a8a9928a813501f66f867277928515e9e2ed..f4e2d3686dcd1e894bca30d944bdd1bb52dd5218 100644
--- a/util/generate_build_files.py
+++ b/util/generate_build_files.py
@@ -151,6 +151,14 @@ class Android(object):
       blueprint.write('    ],\n')
       blueprint.write('}\n\n')
 
+      blueprint.write('cc_defaults {\n')
+      blueprint.write('    name: "libdecrepit_sources",\n')
+      blueprint.write('    srcs: [\n')
+      for f in sorted(files['decrepit']):
+        blueprint.write('        "%s",\n' % f)
+      blueprint.write('    ],\n')
+      blueprint.write('}\n\n')
+
     # Legacy Android.mk format, only used by Trusty in new branches
     with open('sources.mk', 'w+') as makefile:
       makefile.write(self.header)
@@ -199,6 +207,7 @@ class Bazel(object):
       self.PrintVariableSection(out, 'crypto_sources', files['crypto'])
       self.PrintVariableSection(out, 'tool_sources', files['tool'])
       self.PrintVariableSection(out, 'tool_headers', files['tool_headers'])
+      self.PrintVariableSection(out, 'decrepit_sources', files['decrepit'])
 
       for ((osname, arch), asm_files) in asm_outputs:
         self.PrintVariableSection(
@@ -353,6 +362,8 @@ class GYP(object):
       self.PrintVariableSection(gypi, 'boringssl_crypto_sources',
                                 files['crypto'] + files['crypto_headers'] +
                                 files['crypto_internal_headers'])
+      self.PrintVariableSection(out, 'decrepit_sources',
+                                files['decrepit'])
 
       for ((osname, arch), asm_files) in asm_outputs:
         self.PrintVariableSection(gypi, 'boringssl_%s_%s_sources' %
@@ -592,6 +603,21 @@ def main(platforms):
   ssl_source_files = FindCFiles(os.path.join('src', 'ssl'), NoTests)
   tool_c_files = FindCFiles(os.path.join('src', 'tool'), NoTests)
   tool_h_files = FindHeaderFiles(os.path.join('src', 'tool'), AllFiles)
+  decrepit_c_files = (
+      FindCFiles(os.path.join('src', 'decrepit', 'bio'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'bio_ssl'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'blowfish'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'cast'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'des'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'dh'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'dsa'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'evp'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'rc4'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'ripemd'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'rsa'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'ssl'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'x509'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'xts'), NoTests))
 
   # third_party/fiat/p256.c lives in third_party/fiat, but it is a FIPS
   # fragment, not a normal source file.
@@ -664,6 +690,7 @@ def main(platforms):
       'ssl_test': sorted(ssl_test_files),
       'tool': tool_c_files,
       'tool_headers': tool_h_files,
+      'decrepit': decrepit_c_files,
       'test_support': test_support_c_files,
       'test_support_headers': test_support_h_files,
   }
